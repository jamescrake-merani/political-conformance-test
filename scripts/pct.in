#!@GUILE@ \
-e main -s
!#

;;; Political Conformance Test
;;; Copyright (C) 2022 James Crake-Merani
;;;
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;; This is a script which asks a question based on the file supplied by the command line argument.
;; TODO: Allow input from STDIN

(define (print-help)
  (display "Political Conformance Test. Please supply a questions file as an argument. For more info, consult the documentation")
  (newline))

(use-modules (political-conformance-test operations)
             (political-conformance-test interactive-console)
             (ice-9 format))

;; The open function doesn't have its own exceptions so this
;; function is needed in order to get a specific error that
;; can be presented to the user.
(define (get-file-error args)
  (car (list-ref args 3)))


(define (main args)
  (let* ((questions-path (car args))
         (questions (load-questions questions-path))
         (scores (ask-questions questions))
         (total-frac-score (test-fraction scores))
         (percentage-score (as-percentage total-frac-score)))
    (display (string-append "You conformance to this ideology is: " (number->string percentage-score) "%"))
    (newline)))


(define (main args)
  (if (null? (cdr args))
      (print-help)
      (catch #t (lambda () (let* ((questions (load-questions (cadr args)))
                               (scores (ask-questions questions))
                               (total-frac-score (test-fraction scores))
                               (percentage-score (as-percentage total-frac-score)))
                          (display (format #f "Your conformance to this ideology is: ~d%" (inexact->exact percentage-score)))
                          (newline)))
        (lambda (. args)
          (cond ((eq? (car args) 'system-error) (begin
                                               (display (string-append "Cannot load file: " (get-file-error args)))
                                               (newline)))
                (else (throw (car args) (cdr args))))))))
